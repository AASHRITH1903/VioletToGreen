[[{"startLine":10,"endLine":10,"string":"// min trials with n eggs and m floors","startCharacter":4,"endCharacter":43,"filepath":"/mnt/16B47E63B47E4571/Debeshee/Academics/B Tech IITTP/6th Sem/CS3294 Software Engineering Lab/Project/VioletToGreen/Dataset/ToyData/CodeFiles/EggDropping.java","type":"manual"},{"startLine":12,"endLine":76,"string":"rivate static int minTrials(int n, int m) {\n\n        int[][] eggFloor = new int[n + 1][m + 1];\n        int result, x;\n\n        for (int i = 1; i <= n; i++) {\n            eggFloor[i][0] = 0; // Zero trial for zero floor.\n            eggFloor[i][1] = 1; // One trial for one floor\n        }\n\n        // j trials for only 1 egg\n\n        for (int j = 1; j <= m; j++) {\n            eggFloor[1][j] = j;\n            System.out.println(\"output\");\n        }\n\n        // Using bottom-up approach in DP\n        for (int i = 2; i <= n; i++) {\n            for (int j = 2; j <= m; j++) {\n                eggFloor[i][j] = Integer.MAX_VALUE;\n                for (x = 1; x <= j; x++) {\n                    result = 1 + Math.max(eggFloor[i - 1][x - 1], eggFloor[i][j - x]);\n\n                    // choose min of all values for particular x\n                    if (result < eggFloor[i][j]) {\n                        eggFloor[i][j] = result;\n                    } else if (a == b) { // the above equation\n                        System.out.println(\"a==b\");\n                    } else { // this is here\n                        System.out.println(\"a!=b\");\n                    }\n                }\n            }\n        }\n\n        // in here\n        switch (x) {\n            // no keyword\n            case 0:\n                // inside case\n                System.out.println(\"0\");\n                break;\n            case 1:\n                // inside no keyword\n                System.out.println(\"1\");\n                break;\n            // this case is here\n            default:\n                System.out.println(x);\n                break;\n        }\n\n        // hello\n        do {\n            System.out.println(\"x\");\n        } while (x == 0);\n        // the above loop\n\n        while (true) {\n            System.out.println(\"\");\n        }\n\n        return eggFloor[n][m];\n    }","startCharacter":5,"endCharacter":6,"filepath":"/mnt/16B47E63B47E4571/Debeshee/Academics/B Tech IITTP/6th Sem/CS3294 Software Engineering Lab/Project/VioletToGreen/Dataset/ToyData/CodeFiles/EggDropping.java","type":"manual"}],[{"startLine":3,"endLine":7,"string":"**\n * DynamicProgramming solution for the Egg Dropping Puzzle\n * \n * \n */","startCharacter":1,"endCharacter":4,"filepath":"/mnt/16B47E63B47E4571/Debeshee/Academics/B Tech IITTP/6th Sem/CS3294 Software Engineering Lab/Project/VioletToGreen/Dataset/ToyData/CodeFiles/EggDropping.java"},{"startLine":8,"endLine":84,"string":"ublic class EggDropping {\n\n    // min trials with n eggs and m floors\n\n    private static int minTrials(int n, int m) {\n\n        int[][] eggFloor = new int[n + 1][m + 1];\n        int result, x;\n\n        for (int i = 1; i <= n; i++) {\n            eggFloor[i][0] = 0; // Zero trial for zero floor.\n            eggFloor[i][1] = 1; // One trial for one floor\n        }\n\n        // j trials for only 1 egg\n\n        for (int j = 1; j <= m; j++) {\n            eggFloor[1][j] = j;\n            System.out.println(\"output\");\n        }\n\n        // Using bottom-up approach in DP\n        for (int i = 2; i <= n; i++) {\n            for (int j = 2; j <= m; j++) {\n                eggFloor[i][j] = Integer.MAX_VALUE;\n                for (x = 1; x <= j; x++) {\n                    result = 1 + Math.max(eggFloor[i - 1][x - 1], eggFloor[i][j - x]);\n\n                    // choose min of all values for particular x\n                    if (result < eggFloor[i][j]) {\n                        eggFloor[i][j] = result;\n                    } else if (a == b) { // the above equation\n                        System.out.println(\"a==b\");\n                    } else { // this is here\n                        System.out.println(\"a!=b\");\n                    }\n                }\n            }\n        }\n\n        // in here\n        switch (x) {\n            // no keyword\n            case 0:\n                // inside case\n                System.out.println(\"0\");\n                break;\n            case 1:\n                // inside no keyword\n                System.out.println(\"1\");\n                break;\n            // this case is here\n            default:\n                System.out.println(x);\n                break;\n        }\n\n        // hello\n        do {\n            System.out.println(\"x\");\n        } while (x == 0);\n        // the above loop\n\n        while (true) {\n            System.out.println(\"\");\n        }\n\n        return eggFloor[n][m];\n    }\n\n    public static void main(String args[]) {\n        int n = 2, m = 4;\n        // result outputs min no. of trials in worst case for n eggs and m floors\n        int result = minTrials(n, m);\n        System.out.println(\n                \"Minimum number of trials in worst case with \" + n + \" eggs and \" + m + \" floors is \" + result);\n  ","startCharacter":1,"endCharacter":2,"filepath":"/mnt/16B47E63B47E4571/Debeshee/Academics/B Tech IITTP/6th Sem/CS3294 Software Engineering Lab/Project/VioletToGreen/Dataset/ToyData/CodeFiles/EggDropping.java"}]]